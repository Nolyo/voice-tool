name: Release

on:
  push:
    tags:
      - "v*"
    branches:
      - "*-ci-test"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    name: Build and Release (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build with Tauri Action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "Voice Tool ${{ github.ref_name }}"
          releaseBody: |
            See the [CHANGELOG](https://github.com/Nolyo/voice-tool/blob/${{ github.ref_name }}/CHANGELOG.md) for details.

            ## Downloads

            - **voice-tool-${{ github.ref_name }}-portable.exe** : Portable version (no installation required)
            - **voice-tool-${{ github.ref_name }}-setup.exe** : NSIS installer (recommended)
            - **voice-tool-${{ github.ref_name }}-setup.msi** : MSI installer (Windows Installer)

            Verify file integrity using the provided SHA256 checksums.
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: false

      - name: Get version from tag
        id: get_version
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}" -replace '^v', ''
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"

      - name: Rename and prepare artifacts
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $tag = "${{ github.ref_name }}"

          # Create output directory
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null

          # Paths to files generated by Tauri
          $releaseDir = "src-tauri\target\release"
          $bundleDir = "src-tauri\target\release\bundle"

          # 1. Rename portable .exe
          $portableSource = Join-Path $releaseDir "voice-tool.exe"
          $portableDest = "artifacts\voice-tool-$tag-portable.exe"
          if (Test-Path $portableSource) {
            Copy-Item $portableSource $portableDest
            Write-Host "✓ Portable: $portableDest"
          } else {
            Write-Warning "Portable EXE not found at $portableSource"
          }

          # 2. Rename NSIS installer
          $nsisPattern = Join-Path $bundleDir "nsis\voice-tool_*_x64-setup.exe"
          $nsisSource = Get-ChildItem $nsisPattern | Select-Object -First 1
          if ($nsisSource) {
            $nsisTarget = "artifacts\voice-tool-$tag-setup.exe"
            Copy-Item $nsisSource.FullName $nsisTarget
            Write-Host "✓ NSIS Installer: $nsisTarget"
          } else {
            Write-Warning "NSIS installer not found"
          }

          # 3. Rename MSI installer
          $msiPattern = Join-Path $bundleDir "msi\voice-tool_*_x64_en-US.msi"
          $msiSource = Get-ChildItem $msiPattern | Select-Object -First 1
          if ($msiSource) {
            $msiTarget = "artifacts\voice-tool-$tag-setup.msi"
            Copy-Item $msiSource.FullName $msiTarget
            Write-Host "✓ MSI Installer: $msiTarget"
          } else {
            Write-Warning "MSI installer not found"
          }

          # List all created files
          Write-Host "`nCreated artifacts:"
          Get-ChildItem artifacts | ForEach-Object { Write-Host "  - $($_.Name)" }

      - name: Generate SHA256 checksums
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          $checksumFile = "artifacts\checksums-$tag.txt"

          # Generate checksums for all .exe and .msi files
          Get-ChildItem artifacts -Filter *.exe | ForEach-Object {
            $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash.ToLower()
            $line = "$hash *$($_.Name)"
            Add-Content $checksumFile $line
            Write-Host "✓ $($_.Name): $hash"
          }

          Get-ChildItem artifacts -Filter *.msi | ForEach-Object {
            $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash.ToLower()
            $line = "$hash *$($_.Name)"
            Add-Content $checksumFile $line
            Write-Host "✓ $($_.Name): $hash"
          }

          Write-Host "`nChecksum file created: $checksumFile"

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            artifacts/*

      - name: Setup Node.js for JSON generation
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies for JSON script
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: .github/scripts
        run: npm install

      - name: Generate releases.json
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: .github/scripts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node generate-releases-json.js

      - name: Commit and push releases.json
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git fetch origin main
          git checkout main
          git pull origin main
          git add docs/releases.json
          git diff --staged --quiet || git commit -m "chore: update releases.json for ${{ github.ref_name }}"
          git push origin main
